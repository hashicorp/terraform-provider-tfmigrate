// Code generated by mockery v2.49.0. DO NOT EDIT.

package gitops_mocks

import (
	constants "terraform-provider-tfmigrate/internal/constants"
	gitops "terraform-provider-tfmigrate/internal/gitops"

	mock "github.com/stretchr/testify/mock"
)

// MockGitOperations is an autogenerated mock type for the GitOperations type
type MockGitOperations struct {
	mock.Mock
}

type MockGitOperations_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitOperations) EXPECT() *MockGitOperations_Expecter {
	return &MockGitOperations_Expecter{mock: &_m.Mock}
}

// CreateAndSwitchBranch provides a mock function with given fields: repoPath, branchName
func (_m *MockGitOperations) CreateAndSwitchBranch(repoPath string, branchName string) error {
	ret := _m.Called(repoPath, branchName)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndSwitchBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoPath, branchName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitOperations_CreateAndSwitchBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndSwitchBranch'
type MockGitOperations_CreateAndSwitchBranch_Call struct {
	*mock.Call
}

// CreateAndSwitchBranch is a helper method to define mock.On call
//   - repoPath string
//   - branchName string
func (_e *MockGitOperations_Expecter) CreateAndSwitchBranch(repoPath interface{}, branchName interface{}) *MockGitOperations_CreateAndSwitchBranch_Call {
	return &MockGitOperations_CreateAndSwitchBranch_Call{Call: _e.mock.On("CreateAndSwitchBranch", repoPath, branchName)}
}

func (_c *MockGitOperations_CreateAndSwitchBranch_Call) Run(run func(repoPath string, branchName string)) *MockGitOperations_CreateAndSwitchBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitOperations_CreateAndSwitchBranch_Call) Return(_a0 error) *MockGitOperations_CreateAndSwitchBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitOperations_CreateAndSwitchBranch_Call) RunAndReturn(run func(string, string) error) *MockGitOperations_CreateAndSwitchBranch_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCommit provides a mock function with given fields: repoPath, message
func (_m *MockGitOperations) CreateCommit(repoPath string, message string) (string, error) {
	ret := _m.Called(repoPath, message)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(repoPath, message)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(repoPath, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repoPath, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitOperations_CreateCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommit'
type MockGitOperations_CreateCommit_Call struct {
	*mock.Call
}

// CreateCommit is a helper method to define mock.On call
//   - repoPath string
//   - message string
func (_e *MockGitOperations_Expecter) CreateCommit(repoPath interface{}, message interface{}) *MockGitOperations_CreateCommit_Call {
	return &MockGitOperations_CreateCommit_Call{Call: _e.mock.On("CreateCommit", repoPath, message)}
}

func (_c *MockGitOperations_CreateCommit_Call) Run(run func(repoPath string, message string)) *MockGitOperations_CreateCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitOperations_CreateCommit_Call) Return(_a0 string, _a1 error) *MockGitOperations_CreateCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitOperations_CreateCommit_Call) RunAndReturn(run func(string, string) (string, error)) *MockGitOperations_CreateCommit_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequest provides a mock function with given fields: params
func (_m *MockGitOperations) CreatePullRequest(params gitops.PullRequestParams) (string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(gitops.PullRequestParams) (string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(gitops.PullRequestParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(gitops.PullRequestParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitOperations_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type MockGitOperations_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - params gitops.PullRequestParams
func (_e *MockGitOperations_Expecter) CreatePullRequest(params interface{}) *MockGitOperations_CreatePullRequest_Call {
	return &MockGitOperations_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", params)}
}

func (_c *MockGitOperations_CreatePullRequest_Call) Run(run func(params gitops.PullRequestParams)) *MockGitOperations_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gitops.PullRequestParams))
	})
	return _c
}

func (_c *MockGitOperations_CreatePullRequest_Call) Return(_a0 string, _a1 error) *MockGitOperations_CreatePullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitOperations_CreatePullRequest_Call) RunAndReturn(run func(gitops.PullRequestParams) (string, error)) *MockGitOperations_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLocalBranch provides a mock function with given fields: repoPath, branchName
func (_m *MockGitOperations) DeleteLocalBranch(repoPath string, branchName string) error {
	ret := _m.Called(repoPath, branchName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLocalBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoPath, branchName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitOperations_DeleteLocalBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLocalBranch'
type MockGitOperations_DeleteLocalBranch_Call struct {
	*mock.Call
}

// DeleteLocalBranch is a helper method to define mock.On call
//   - repoPath string
//   - branchName string
func (_e *MockGitOperations_Expecter) DeleteLocalBranch(repoPath interface{}, branchName interface{}) *MockGitOperations_DeleteLocalBranch_Call {
	return &MockGitOperations_DeleteLocalBranch_Call{Call: _e.mock.On("DeleteLocalBranch", repoPath, branchName)}
}

func (_c *MockGitOperations_DeleteLocalBranch_Call) Run(run func(repoPath string, branchName string)) *MockGitOperations_DeleteLocalBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitOperations_DeleteLocalBranch_Call) Return(_a0 error) *MockGitOperations_DeleteLocalBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitOperations_DeleteLocalBranch_Call) RunAndReturn(run func(string, string) error) *MockGitOperations_DeleteLocalBranch_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteName provides a mock function with given fields:
func (_m *MockGitOperations) GetRemoteName() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitOperations_GetRemoteName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteName'
type MockGitOperations_GetRemoteName_Call struct {
	*mock.Call
}

// GetRemoteName is a helper method to define mock.On call
func (_e *MockGitOperations_Expecter) GetRemoteName() *MockGitOperations_GetRemoteName_Call {
	return &MockGitOperations_GetRemoteName_Call{Call: _e.mock.On("GetRemoteName")}
}

func (_c *MockGitOperations_GetRemoteName_Call) Run(run func()) *MockGitOperations_GetRemoteName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitOperations_GetRemoteName_Call) Return(_a0 string, _a1 error) *MockGitOperations_GetRemoteName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitOperations_GetRemoteName_Call) RunAndReturn(run func() (string, error)) *MockGitOperations_GetRemoteName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteServiceProvider provides a mock function with given fields: remoteURL
func (_m *MockGitOperations) GetRemoteServiceProvider(remoteURL string) *constants.GitServiceProvider {
	ret := _m.Called(remoteURL)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteServiceProvider")
	}

	var r0 *constants.GitServiceProvider
	if rf, ok := ret.Get(0).(func(string) *constants.GitServiceProvider); ok {
		r0 = rf(remoteURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*constants.GitServiceProvider)
		}
	}

	return r0
}

// MockGitOperations_GetRemoteServiceProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteServiceProvider'
type MockGitOperations_GetRemoteServiceProvider_Call struct {
	*mock.Call
}

// GetRemoteServiceProvider is a helper method to define mock.On call
//   - remoteURL string
func (_e *MockGitOperations_Expecter) GetRemoteServiceProvider(remoteURL interface{}) *MockGitOperations_GetRemoteServiceProvider_Call {
	return &MockGitOperations_GetRemoteServiceProvider_Call{Call: _e.mock.On("GetRemoteServiceProvider", remoteURL)}
}

func (_c *MockGitOperations_GetRemoteServiceProvider_Call) Run(run func(remoteURL string)) *MockGitOperations_GetRemoteServiceProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitOperations_GetRemoteServiceProvider_Call) Return(_a0 *constants.GitServiceProvider) *MockGitOperations_GetRemoteServiceProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitOperations_GetRemoteServiceProvider_Call) RunAndReturn(run func(string) *constants.GitServiceProvider) *MockGitOperations_GetRemoteServiceProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteURL provides a mock function with given fields: remoteName
func (_m *MockGitOperations) GetRemoteURL(remoteName string) (string, error) {
	ret := _m.Called(remoteName)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(remoteName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(remoteName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(remoteName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitOperations_GetRemoteURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteURL'
type MockGitOperations_GetRemoteURL_Call struct {
	*mock.Call
}

// GetRemoteURL is a helper method to define mock.On call
//   - remoteName string
func (_e *MockGitOperations_Expecter) GetRemoteURL(remoteName interface{}) *MockGitOperations_GetRemoteURL_Call {
	return &MockGitOperations_GetRemoteURL_Call{Call: _e.mock.On("GetRemoteURL", remoteName)}
}

func (_c *MockGitOperations_GetRemoteURL_Call) Run(run func(remoteName string)) *MockGitOperations_GetRemoteURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitOperations_GetRemoteURL_Call) Return(_a0 string, _a1 error) *MockGitOperations_GetRemoteURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitOperations_GetRemoteURL_Call) RunAndReturn(run func(string) (string, error)) *MockGitOperations_GetRemoteURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoIdentifier provides a mock function with given fields: repoUrl
func (_m *MockGitOperations) GetRepoIdentifier(repoUrl string) string {
	ret := _m.Called(repoUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoIdentifier")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(repoUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockGitOperations_GetRepoIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoIdentifier'
type MockGitOperations_GetRepoIdentifier_Call struct {
	*mock.Call
}

// GetRepoIdentifier is a helper method to define mock.On call
//   - repoUrl string
func (_e *MockGitOperations_Expecter) GetRepoIdentifier(repoUrl interface{}) *MockGitOperations_GetRepoIdentifier_Call {
	return &MockGitOperations_GetRepoIdentifier_Call{Call: _e.mock.On("GetRepoIdentifier", repoUrl)}
}

func (_c *MockGitOperations_GetRepoIdentifier_Call) Run(run func(repoUrl string)) *MockGitOperations_GetRepoIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitOperations_GetRepoIdentifier_Call) Return(_a0 string) *MockGitOperations_GetRepoIdentifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitOperations_GetRepoIdentifier_Call) RunAndReturn(run func(string) string) *MockGitOperations_GetRepoIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// ListBranches provides a mock function with given fields: repoPath
func (_m *MockGitOperations) ListBranches(repoPath string) ([]string, error) {
	ret := _m.Called(repoPath)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(repoPath)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(repoPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitOperations_ListBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBranches'
type MockGitOperations_ListBranches_Call struct {
	*mock.Call
}

// ListBranches is a helper method to define mock.On call
//   - repoPath string
func (_e *MockGitOperations_Expecter) ListBranches(repoPath interface{}) *MockGitOperations_ListBranches_Call {
	return &MockGitOperations_ListBranches_Call{Call: _e.mock.On("ListBranches", repoPath)}
}

func (_c *MockGitOperations_ListBranches_Call) Run(run func(repoPath string)) *MockGitOperations_ListBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitOperations_ListBranches_Call) Return(_a0 []string, _a1 error) *MockGitOperations_ListBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitOperations_ListBranches_Call) RunAndReturn(run func(string) ([]string, error)) *MockGitOperations_ListBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ListRemote provides a mock function with given fields: repoPath
func (_m *MockGitOperations) ListRemote(repoPath string) ([]string, error) {
	ret := _m.Called(repoPath)

	if len(ret) == 0 {
		panic("no return value specified for ListRemote")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(repoPath)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(repoPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitOperations_ListRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRemote'
type MockGitOperations_ListRemote_Call struct {
	*mock.Call
}

// ListRemote is a helper method to define mock.On call
//   - repoPath string
func (_e *MockGitOperations_Expecter) ListRemote(repoPath interface{}) *MockGitOperations_ListRemote_Call {
	return &MockGitOperations_ListRemote_Call{Call: _e.mock.On("ListRemote", repoPath)}
}

func (_c *MockGitOperations_ListRemote_Call) Run(run func(repoPath string)) *MockGitOperations_ListRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitOperations_ListRemote_Call) Return(_a0 []string, _a1 error) *MockGitOperations_ListRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitOperations_ListRemote_Call) RunAndReturn(run func(string) ([]string, error)) *MockGitOperations_ListRemote_Call {
	_c.Call.Return(run)
	return _c
}

// PushCommit provides a mock function with given fields: repoPath, remoteName, branchName, githubToken, force
func (_m *MockGitOperations) PushCommit(repoPath string, remoteName string, branchName string, githubToken string, force bool) error {
	ret := _m.Called(repoPath, remoteName, branchName, githubToken, force)

	if len(ret) == 0 {
		panic("no return value specified for PushCommit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) error); ok {
		r0 = rf(repoPath, remoteName, branchName, githubToken, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitOperations_PushCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushCommit'
type MockGitOperations_PushCommit_Call struct {
	*mock.Call
}

// PushCommit is a helper method to define mock.On call
//   - repoPath string
//   - remoteName string
//   - branchName string
//   - githubToken string
//   - force bool
func (_e *MockGitOperations_Expecter) PushCommit(repoPath interface{}, remoteName interface{}, branchName interface{}, githubToken interface{}, force interface{}) *MockGitOperations_PushCommit_Call {
	return &MockGitOperations_PushCommit_Call{Call: _e.mock.On("PushCommit", repoPath, remoteName, branchName, githubToken, force)}
}

func (_c *MockGitOperations_PushCommit_Call) Run(run func(repoPath string, remoteName string, branchName string, githubToken string, force bool)) *MockGitOperations_PushCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockGitOperations_PushCommit_Call) Return(_a0 error) *MockGitOperations_PushCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitOperations_PushCommit_Call) RunAndReturn(run func(string, string, string, string, bool) error) *MockGitOperations_PushCommit_Call {
	_c.Call.Return(run)
	return _c
}

// PushCommitUsingGit provides a mock function with given fields: remoteName, branchName
func (_m *MockGitOperations) PushCommitUsingGit(remoteName string, branchName string) error {
	ret := _m.Called(remoteName, branchName)

	if len(ret) == 0 {
		panic("no return value specified for PushCommitUsingGit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(remoteName, branchName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitOperations_PushCommitUsingGit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushCommitUsingGit'
type MockGitOperations_PushCommitUsingGit_Call struct {
	*mock.Call
}

// PushCommitUsingGit is a helper method to define mock.On call
//   - remoteName string
//   - branchName string
func (_e *MockGitOperations_Expecter) PushCommitUsingGit(remoteName interface{}, branchName interface{}) *MockGitOperations_PushCommitUsingGit_Call {
	return &MockGitOperations_PushCommitUsingGit_Call{Call: _e.mock.On("PushCommitUsingGit", remoteName, branchName)}
}

func (_c *MockGitOperations_PushCommitUsingGit_Call) Run(run func(remoteName string, branchName string)) *MockGitOperations_PushCommitUsingGit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitOperations_PushCommitUsingGit_Call) Return(_a0 error) *MockGitOperations_PushCommitUsingGit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitOperations_PushCommitUsingGit_Call) RunAndReturn(run func(string, string) error) *MockGitOperations_PushCommitUsingGit_Call {
	_c.Call.Return(run)
	return _c
}

// ResetToLastCommittedVersion provides a mock function with given fields: repoPath
func (_m *MockGitOperations) ResetToLastCommittedVersion(repoPath string) error {
	ret := _m.Called(repoPath)

	if len(ret) == 0 {
		panic("no return value specified for ResetToLastCommittedVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitOperations_ResetToLastCommittedVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetToLastCommittedVersion'
type MockGitOperations_ResetToLastCommittedVersion_Call struct {
	*mock.Call
}

// ResetToLastCommittedVersion is a helper method to define mock.On call
//   - repoPath string
func (_e *MockGitOperations_Expecter) ResetToLastCommittedVersion(repoPath interface{}) *MockGitOperations_ResetToLastCommittedVersion_Call {
	return &MockGitOperations_ResetToLastCommittedVersion_Call{Call: _e.mock.On("ResetToLastCommittedVersion", repoPath)}
}

func (_c *MockGitOperations_ResetToLastCommittedVersion_Call) Run(run func(repoPath string)) *MockGitOperations_ResetToLastCommittedVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitOperations_ResetToLastCommittedVersion_Call) Return(_a0 error) *MockGitOperations_ResetToLastCommittedVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitOperations_ResetToLastCommittedVersion_Call) RunAndReturn(run func(string) error) *MockGitOperations_ResetToLastCommittedVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitOperations creates a new instance of MockGitOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitOperations {
	mock := &MockGitOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
