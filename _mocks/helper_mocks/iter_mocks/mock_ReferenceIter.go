// Code generated by mockery v2.51.1. DO NOT EDIT.

package iter_mocks

import (
	plumbing "github.com/go-git/go-git/v5/plumbing"
	mock "github.com/stretchr/testify/mock"
)

// MockReferenceIter is an autogenerated mock type for the ReferenceIter type
type MockReferenceIter struct {
	mock.Mock
}

type MockReferenceIter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReferenceIter) EXPECT() *MockReferenceIter_Expecter {
	return &MockReferenceIter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockReferenceIter) Close() {
	_m.Called()
}

// MockReferenceIter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReferenceIter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockReferenceIter_Expecter) Close() *MockReferenceIter_Close_Call {
	return &MockReferenceIter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockReferenceIter_Close_Call) Run(run func()) *MockReferenceIter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReferenceIter_Close_Call) Return() *MockReferenceIter_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReferenceIter_Close_Call) RunAndReturn(run func()) *MockReferenceIter_Close_Call {
	_c.Run(run)
	return _c
}

// ForEach provides a mock function with given fields: _a0
func (_m *MockReferenceIter) ForEach(_a0 func(*plumbing.Reference) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ForEach")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*plumbing.Reference) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReferenceIter_ForEach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForEach'
type MockReferenceIter_ForEach_Call struct {
	*mock.Call
}

// ForEach is a helper method to define mock.On call
//   - _a0 func(*plumbing.Reference) error
func (_e *MockReferenceIter_Expecter) ForEach(_a0 interface{}) *MockReferenceIter_ForEach_Call {
	return &MockReferenceIter_ForEach_Call{Call: _e.mock.On("ForEach", _a0)}
}

func (_c *MockReferenceIter_ForEach_Call) Run(run func(_a0 func(*plumbing.Reference) error)) *MockReferenceIter_ForEach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*plumbing.Reference) error))
	})
	return _c
}

func (_c *MockReferenceIter_ForEach_Call) Return(_a0 error) *MockReferenceIter_ForEach_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReferenceIter_ForEach_Call) RunAndReturn(run func(func(*plumbing.Reference) error) error) *MockReferenceIter_ForEach_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockReferenceIter) Next() (*plumbing.Reference, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func() (*plumbing.Reference, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *plumbing.Reference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReferenceIter_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockReferenceIter_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockReferenceIter_Expecter) Next() *MockReferenceIter_Next_Call {
	return &MockReferenceIter_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockReferenceIter_Next_Call) Run(run func()) *MockReferenceIter_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReferenceIter_Next_Call) Return(_a0 *plumbing.Reference, _a1 error) *MockReferenceIter_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReferenceIter_Next_Call) RunAndReturn(run func() (*plumbing.Reference, error)) *MockReferenceIter_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReferenceIter creates a new instance of MockReferenceIter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReferenceIter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReferenceIter {
	mock := &MockReferenceIter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
