// Code generated by mockery v2.53.2. DO NOT EDIT.

package helper_mocks

import (
	stacks "terraform-provider-tfmigrate/internal/terraform/rpcapi/terraform1/stacks"

	mock "github.com/stretchr/testify/mock"
)

// MockTfStateOperations is an autogenerated mock type for the TfStateOperations type
type MockTfStateOperations struct {
	mock.Mock
}

type MockTfStateOperations_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTfStateOperations) EXPECT() *MockTfStateOperations_Expecter {
	return &MockTfStateOperations_Expecter{mock: &_m.Mock}
}

// MigrateTFState provides a mock function with given fields: tfStateHandle, stackConfigHandle, dependencyLocksHandle, providerCacheHandle, resources, modules
func (_m *MockTfStateOperations) MigrateTFState(tfStateHandle int64, stackConfigHandle int64, dependencyLocksHandle int64, providerCacheHandle int64, resources map[string]string, modules map[string]string) (stacks.Stacks_MigrateTerraformStateClient, error) {
	ret := _m.Called(tfStateHandle, stackConfigHandle, dependencyLocksHandle, providerCacheHandle, resources, modules)

	if len(ret) == 0 {
		panic("no return value specified for MigrateTFState")
	}

	var r0 stacks.Stacks_MigrateTerraformStateClient
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, int64, int64, map[string]string, map[string]string) (stacks.Stacks_MigrateTerraformStateClient, error)); ok {
		return rf(tfStateHandle, stackConfigHandle, dependencyLocksHandle, providerCacheHandle, resources, modules)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int64, int64, map[string]string, map[string]string) stacks.Stacks_MigrateTerraformStateClient); ok {
		r0 = rf(tfStateHandle, stackConfigHandle, dependencyLocksHandle, providerCacheHandle, resources, modules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stacks.Stacks_MigrateTerraformStateClient)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int64, int64, map[string]string, map[string]string) error); ok {
		r1 = rf(tfStateHandle, stackConfigHandle, dependencyLocksHandle, providerCacheHandle, resources, modules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfStateOperations_MigrateTFState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrateTFState'
type MockTfStateOperations_MigrateTFState_Call struct {
	*mock.Call
}

// MigrateTFState is a helper method to define mock.On call
//   - tfStateHandle int64
//   - stackConfigHandle int64
//   - dependencyLocksHandle int64
//   - providerCacheHandle int64
//   - resources map[string]string
//   - modules map[string]string
func (_e *MockTfStateOperations_Expecter) MigrateTFState(tfStateHandle interface{}, stackConfigHandle interface{}, dependencyLocksHandle interface{}, providerCacheHandle interface{}, resources interface{}, modules interface{}) *MockTfStateOperations_MigrateTFState_Call {
	return &MockTfStateOperations_MigrateTFState_Call{Call: _e.mock.On("MigrateTFState", tfStateHandle, stackConfigHandle, dependencyLocksHandle, providerCacheHandle, resources, modules)}
}

func (_c *MockTfStateOperations_MigrateTFState_Call) Run(run func(tfStateHandle int64, stackConfigHandle int64, dependencyLocksHandle int64, providerCacheHandle int64, resources map[string]string, modules map[string]string)) *MockTfStateOperations_MigrateTFState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(map[string]string), args[5].(map[string]string))
	})
	return _c
}

func (_c *MockTfStateOperations_MigrateTFState_Call) Return(_a0 stacks.Stacks_MigrateTerraformStateClient, _a1 error) *MockTfStateOperations_MigrateTFState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfStateOperations_MigrateTFState_Call) RunAndReturn(run func(int64, int64, int64, int64, map[string]string, map[string]string) (stacks.Stacks_MigrateTerraformStateClient, error)) *MockTfStateOperations_MigrateTFState_Call {
	_c.Call.Return(run)
	return _c
}

// OpenDependencyLockFile provides a mock function with given fields: handle, dotTFLockFile
func (_m *MockTfStateOperations) OpenDependencyLockFile(handle int64, dotTFLockFile string) (int64, func() error, error) {
	ret := _m.Called(handle, dotTFLockFile)

	if len(ret) == 0 {
		panic("no return value specified for OpenDependencyLockFile")
	}

	var r0 int64
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, string) (int64, func() error, error)); ok {
		return rf(handle, dotTFLockFile)
	}
	if rf, ok := ret.Get(0).(func(int64, string) int64); ok {
		r0 = rf(handle, dotTFLockFile)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, string) func() error); ok {
		r1 = rf(handle, dotTFLockFile)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(int64, string) error); ok {
		r2 = rf(handle, dotTFLockFile)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTfStateOperations_OpenDependencyLockFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenDependencyLockFile'
type MockTfStateOperations_OpenDependencyLockFile_Call struct {
	*mock.Call
}

// OpenDependencyLockFile is a helper method to define mock.On call
//   - handle int64
//   - dotTFLockFile string
func (_e *MockTfStateOperations_Expecter) OpenDependencyLockFile(handle interface{}, dotTFLockFile interface{}) *MockTfStateOperations_OpenDependencyLockFile_Call {
	return &MockTfStateOperations_OpenDependencyLockFile_Call{Call: _e.mock.On("OpenDependencyLockFile", handle, dotTFLockFile)}
}

func (_c *MockTfStateOperations_OpenDependencyLockFile_Call) Run(run func(handle int64, dotTFLockFile string)) *MockTfStateOperations_OpenDependencyLockFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockTfStateOperations_OpenDependencyLockFile_Call) Return(_a0 int64, _a1 func() error, _a2 error) *MockTfStateOperations_OpenDependencyLockFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTfStateOperations_OpenDependencyLockFile_Call) RunAndReturn(run func(int64, string) (int64, func() error, error)) *MockTfStateOperations_OpenDependencyLockFile_Call {
	_c.Call.Return(run)
	return _c
}

// OpenProviderCache provides a mock function with given fields: dotTFProvidersPath
func (_m *MockTfStateOperations) OpenProviderCache(dotTFProvidersPath string) (int64, func() error, error) {
	ret := _m.Called(dotTFProvidersPath)

	if len(ret) == 0 {
		panic("no return value specified for OpenProviderCache")
	}

	var r0 int64
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int64, func() error, error)); ok {
		return rf(dotTFProvidersPath)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(dotTFProvidersPath)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) func() error); ok {
		r1 = rf(dotTFProvidersPath)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(dotTFProvidersPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTfStateOperations_OpenProviderCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenProviderCache'
type MockTfStateOperations_OpenProviderCache_Call struct {
	*mock.Call
}

// OpenProviderCache is a helper method to define mock.On call
//   - dotTFProvidersPath string
func (_e *MockTfStateOperations_Expecter) OpenProviderCache(dotTFProvidersPath interface{}) *MockTfStateOperations_OpenProviderCache_Call {
	return &MockTfStateOperations_OpenProviderCache_Call{Call: _e.mock.On("OpenProviderCache", dotTFProvidersPath)}
}

func (_c *MockTfStateOperations_OpenProviderCache_Call) Run(run func(dotTFProvidersPath string)) *MockTfStateOperations_OpenProviderCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTfStateOperations_OpenProviderCache_Call) Return(_a0 int64, _a1 func() error, _a2 error) *MockTfStateOperations_OpenProviderCache_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTfStateOperations_OpenProviderCache_Call) RunAndReturn(run func(string) (int64, func() error, error)) *MockTfStateOperations_OpenProviderCache_Call {
	_c.Call.Return(run)
	return _c
}

// OpenSourceBundle provides a mock function with given fields: dotTFModulesPath
func (_m *MockTfStateOperations) OpenSourceBundle(dotTFModulesPath string) (int64, func() error, error) {
	ret := _m.Called(dotTFModulesPath)

	if len(ret) == 0 {
		panic("no return value specified for OpenSourceBundle")
	}

	var r0 int64
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int64, func() error, error)); ok {
		return rf(dotTFModulesPath)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(dotTFModulesPath)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) func() error); ok {
		r1 = rf(dotTFModulesPath)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(dotTFModulesPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTfStateOperations_OpenSourceBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenSourceBundle'
type MockTfStateOperations_OpenSourceBundle_Call struct {
	*mock.Call
}

// OpenSourceBundle is a helper method to define mock.On call
//   - dotTFModulesPath string
func (_e *MockTfStateOperations_Expecter) OpenSourceBundle(dotTFModulesPath interface{}) *MockTfStateOperations_OpenSourceBundle_Call {
	return &MockTfStateOperations_OpenSourceBundle_Call{Call: _e.mock.On("OpenSourceBundle", dotTFModulesPath)}
}

func (_c *MockTfStateOperations_OpenSourceBundle_Call) Run(run func(dotTFModulesPath string)) *MockTfStateOperations_OpenSourceBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTfStateOperations_OpenSourceBundle_Call) Return(_a0 int64, _a1 func() error, _a2 error) *MockTfStateOperations_OpenSourceBundle_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTfStateOperations_OpenSourceBundle_Call) RunAndReturn(run func(string) (int64, func() error, error)) *MockTfStateOperations_OpenSourceBundle_Call {
	_c.Call.Return(run)
	return _c
}

// OpenStacksConfiguration provides a mock function with given fields: sourceBundleHandle, stackConfigPath
func (_m *MockTfStateOperations) OpenStacksConfiguration(sourceBundleHandle int64, stackConfigPath string) (int64, func() error, error) {
	ret := _m.Called(sourceBundleHandle, stackConfigPath)

	if len(ret) == 0 {
		panic("no return value specified for OpenStacksConfiguration")
	}

	var r0 int64
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, string) (int64, func() error, error)); ok {
		return rf(sourceBundleHandle, stackConfigPath)
	}
	if rf, ok := ret.Get(0).(func(int64, string) int64); ok {
		r0 = rf(sourceBundleHandle, stackConfigPath)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, string) func() error); ok {
		r1 = rf(sourceBundleHandle, stackConfigPath)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(int64, string) error); ok {
		r2 = rf(sourceBundleHandle, stackConfigPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTfStateOperations_OpenStacksConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenStacksConfiguration'
type MockTfStateOperations_OpenStacksConfiguration_Call struct {
	*mock.Call
}

// OpenStacksConfiguration is a helper method to define mock.On call
//   - sourceBundleHandle int64
//   - stackConfigPath string
func (_e *MockTfStateOperations_Expecter) OpenStacksConfiguration(sourceBundleHandle interface{}, stackConfigPath interface{}) *MockTfStateOperations_OpenStacksConfiguration_Call {
	return &MockTfStateOperations_OpenStacksConfiguration_Call{Call: _e.mock.On("OpenStacksConfiguration", sourceBundleHandle, stackConfigPath)}
}

func (_c *MockTfStateOperations_OpenStacksConfiguration_Call) Run(run func(sourceBundleHandle int64, stackConfigPath string)) *MockTfStateOperations_OpenStacksConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockTfStateOperations_OpenStacksConfiguration_Call) Return(_a0 int64, _a1 func() error, _a2 error) *MockTfStateOperations_OpenStacksConfiguration_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTfStateOperations_OpenStacksConfiguration_Call) RunAndReturn(run func(int64, string) (int64, func() error, error)) *MockTfStateOperations_OpenStacksConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// OpenTerraformState provides a mock function with given fields: tfStateFileDir
func (_m *MockTfStateOperations) OpenTerraformState(tfStateFileDir string) (int64, func() error, error) {
	ret := _m.Called(tfStateFileDir)

	if len(ret) == 0 {
		panic("no return value specified for OpenTerraformState")
	}

	var r0 int64
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int64, func() error, error)); ok {
		return rf(tfStateFileDir)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(tfStateFileDir)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) func() error); ok {
		r1 = rf(tfStateFileDir)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(tfStateFileDir)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTfStateOperations_OpenTerraformState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenTerraformState'
type MockTfStateOperations_OpenTerraformState_Call struct {
	*mock.Call
}

// OpenTerraformState is a helper method to define mock.On call
//   - tfStateFileDir string
func (_e *MockTfStateOperations_Expecter) OpenTerraformState(tfStateFileDir interface{}) *MockTfStateOperations_OpenTerraformState_Call {
	return &MockTfStateOperations_OpenTerraformState_Call{Call: _e.mock.On("OpenTerraformState", tfStateFileDir)}
}

func (_c *MockTfStateOperations_OpenTerraformState_Call) Run(run func(tfStateFileDir string)) *MockTfStateOperations_OpenTerraformState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTfStateOperations_OpenTerraformState_Call) Return(_a0 int64, _a1 func() error, _a2 error) *MockTfStateOperations_OpenTerraformState_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTfStateOperations_OpenTerraformState_Call) RunAndReturn(run func(string) (int64, func() error, error)) *MockTfStateOperations_OpenTerraformState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTfStateOperations creates a new instance of MockTfStateOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTfStateOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTfStateOperations {
	mock := &MockTfStateOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
