// Code generated by mockery v2.53.2. DO NOT EDIT.

package net_mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	net "terraform-provider-tfmigrate/internal/util/net"

	tls "crypto/tls"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: ctx, opts
func (_m *MockClient) Do(ctx context.Context, opts net.RequestOptions) (*http.Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, net.RequestOptions) (*http.Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, net.RequestOptions) *http.Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, net.RequestOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - opts net.RequestOptions
func (_e *MockClient_Expecter) Do(ctx interface{}, opts interface{}) *MockClient_Do_Call {
	return &MockClient_Do_Call{Call: _e.mock.On("Do", ctx, opts)}
}

func (_c *MockClient_Do_Call) Run(run func(ctx context.Context, opts net.RequestOptions)) *MockClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.RequestOptions))
	})
	return _c
}

func (_c *MockClient_Do_Call) Return(_a0 *http.Response, _a1 error) *MockClient_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Do_Call) RunAndReturn(run func(context.Context, net.RequestOptions) (*http.Response, error)) *MockClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// SetTlsConfig provides a mock function with given fields: tlsConfig
func (_m *MockClient) SetTlsConfig(tlsConfig *tls.Config) error {
	ret := _m.Called(tlsConfig)

	if len(ret) == 0 {
		panic("no return value specified for SetTlsConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*tls.Config) error); ok {
		r0 = rf(tlsConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_SetTlsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTlsConfig'
type MockClient_SetTlsConfig_Call struct {
	*mock.Call
}

// SetTlsConfig is a helper method to define mock.On call
//   - tlsConfig *tls.Config
func (_e *MockClient_Expecter) SetTlsConfig(tlsConfig interface{}) *MockClient_SetTlsConfig_Call {
	return &MockClient_SetTlsConfig_Call{Call: _e.mock.On("SetTlsConfig", tlsConfig)}
}

func (_c *MockClient_SetTlsConfig_Call) Run(run func(tlsConfig *tls.Config)) *MockClient_SetTlsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tls.Config))
	})
	return _c
}

func (_c *MockClient_SetTlsConfig_Call) Return(_a0 error) *MockClient_SetTlsConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SetTlsConfig_Call) RunAndReturn(run func(*tls.Config) error) *MockClient_SetTlsConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
