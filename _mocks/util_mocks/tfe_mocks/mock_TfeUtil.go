// Code generated by mockery v2.53.2. DO NOT EDIT.

package tfe_mocks

import (
	context "context"

	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	mock "github.com/stretchr/testify/mock"

	models "terraform-provider-tfmigrate/internal/models"

	net "terraform-provider-tfmigrate/internal/util/net"

	tfe "github.com/hashicorp/go-tfe"
)

// MockTfeUtil is an autogenerated mock type for the TfeUtil type
type MockTfeUtil struct {
	mock.Mock
}

type MockTfeUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTfeUtil) EXPECT() *MockTfeUtil_Expecter {
	return &MockTfeUtil_Expecter{mock: &_m.Mock}
}

// AdvanceDeploymentRunStep provides a mock function with given fields: stepId, client
func (_m *MockTfeUtil) AdvanceDeploymentRunStep(stepId string, client *tfe.Client) error {
	ret := _m.Called(stepId, client)

	if len(ret) == 0 {
		panic("no return value specified for AdvanceDeploymentRunStep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) error); ok {
		r0 = rf(stepId, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTfeUtil_AdvanceDeploymentRunStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdvanceDeploymentRunStep'
type MockTfeUtil_AdvanceDeploymentRunStep_Call struct {
	*mock.Call
}

// AdvanceDeploymentRunStep is a helper method to define mock.On call
//   - stepId string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) AdvanceDeploymentRunStep(stepId interface{}, client interface{}) *MockTfeUtil_AdvanceDeploymentRunStep_Call {
	return &MockTfeUtil_AdvanceDeploymentRunStep_Call{Call: _e.mock.On("AdvanceDeploymentRunStep", stepId, client)}
}

func (_c *MockTfeUtil_AdvanceDeploymentRunStep_Call) Run(run func(stepId string, client *tfe.Client)) *MockTfeUtil_AdvanceDeploymentRunStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_AdvanceDeploymentRunStep_Call) Return(_a0 error) *MockTfeUtil_AdvanceDeploymentRunStep_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTfeUtil_AdvanceDeploymentRunStep_Call) RunAndReturn(run func(string, *tfe.Client) error) *MockTfeUtil_AdvanceDeploymentRunStep_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateConfigFileHash provides a mock function with given fields: stackConfigFileAbsPath
func (_m *MockTfeUtil) CalculateConfigFileHash(stackConfigFileAbsPath string) (string, error) {
	ret := _m.Called(stackConfigFileAbsPath)

	if len(ret) == 0 {
		panic("no return value specified for CalculateConfigFileHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(stackConfigFileAbsPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(stackConfigFileAbsPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stackConfigFileAbsPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_CalculateConfigFileHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateConfigFileHash'
type MockTfeUtil_CalculateConfigFileHash_Call struct {
	*mock.Call
}

// CalculateConfigFileHash is a helper method to define mock.On call
//   - stackConfigFileAbsPath string
func (_e *MockTfeUtil_Expecter) CalculateConfigFileHash(stackConfigFileAbsPath interface{}) *MockTfeUtil_CalculateConfigFileHash_Call {
	return &MockTfeUtil_CalculateConfigFileHash_Call{Call: _e.mock.On("CalculateConfigFileHash", stackConfigFileAbsPath)}
}

func (_c *MockTfeUtil_CalculateConfigFileHash_Call) Run(run func(stackConfigFileAbsPath string)) *MockTfeUtil_CalculateConfigFileHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTfeUtil_CalculateConfigFileHash_Call) Return(_a0 string, _a1 error) *MockTfeUtil_CalculateConfigFileHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_CalculateConfigFileHash_Call) RunAndReturn(run func(string) (string, error)) *MockTfeUtil_CalculateConfigFileHash_Call {
	_c.Call.Return(run)
	return _c
}

// HandleConvergingStatus provides a mock function with given fields: currentConfigurationId, client
func (_m *MockTfeUtil) HandleConvergingStatus(currentConfigurationId string, client *tfe.Client) string {
	ret := _m.Called(currentConfigurationId, client)

	if len(ret) == 0 {
		panic("no return value specified for HandleConvergingStatus")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) string); ok {
		r0 = rf(currentConfigurationId, client)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTfeUtil_HandleConvergingStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleConvergingStatus'
type MockTfeUtil_HandleConvergingStatus_Call struct {
	*mock.Call
}

// HandleConvergingStatus is a helper method to define mock.On call
//   - currentConfigurationId string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) HandleConvergingStatus(currentConfigurationId interface{}, client interface{}) *MockTfeUtil_HandleConvergingStatus_Call {
	return &MockTfeUtil_HandleConvergingStatus_Call{Call: _e.mock.On("HandleConvergingStatus", currentConfigurationId, client)}
}

func (_c *MockTfeUtil_HandleConvergingStatus_Call) Run(run func(currentConfigurationId string, client *tfe.Client)) *MockTfeUtil_HandleConvergingStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_HandleConvergingStatus_Call) Return(_a0 string) *MockTfeUtil_HandleConvergingStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTfeUtil_HandleConvergingStatus_Call) RunAndReturn(run func(string, *tfe.Client) string) *MockTfeUtil_HandleConvergingStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient provides a mock function with given fields: config
func (_m *MockTfeUtil) NewClient(config *tfe.Config) (*tfe.Client, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewClient")
	}

	var r0 *tfe.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*tfe.Config) (*tfe.Client, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*tfe.Config) *tfe.Client); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*tfe.Config) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_NewClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClient'
type MockTfeUtil_NewClient_Call struct {
	*mock.Call
}

// NewClient is a helper method to define mock.On call
//   - config *tfe.Config
func (_e *MockTfeUtil_Expecter) NewClient(config interface{}) *MockTfeUtil_NewClient_Call {
	return &MockTfeUtil_NewClient_Call{Call: _e.mock.On("NewClient", config)}
}

func (_c *MockTfeUtil_NewClient_Call) Run(run func(config *tfe.Config)) *MockTfeUtil_NewClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tfe.Config))
	})
	return _c
}

func (_c *MockTfeUtil_NewClient_Call) Return(_a0 *tfe.Client, _a1 error) *MockTfeUtil_NewClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_NewClient_Call) RunAndReturn(run func(*tfe.Config) (*tfe.Client, error)) *MockTfeUtil_NewClient_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDeploymentRunSteps provides a mock function with given fields: deploymentRunId, httpClient, tfeConfig
func (_m *MockTfeUtil) ReadDeploymentRunSteps(deploymentRunId string, httpClient net.Client, tfeConfig *tfe.Config) ([]models.StackDeploymentStep, error) {
	ret := _m.Called(deploymentRunId, httpClient, tfeConfig)

	if len(ret) == 0 {
		panic("no return value specified for ReadDeploymentRunSteps")
	}

	var r0 []models.StackDeploymentStep
	var r1 error
	if rf, ok := ret.Get(0).(func(string, net.Client, *tfe.Config) ([]models.StackDeploymentStep, error)); ok {
		return rf(deploymentRunId, httpClient, tfeConfig)
	}
	if rf, ok := ret.Get(0).(func(string, net.Client, *tfe.Config) []models.StackDeploymentStep); ok {
		r0 = rf(deploymentRunId, httpClient, tfeConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StackDeploymentStep)
		}
	}

	if rf, ok := ret.Get(1).(func(string, net.Client, *tfe.Config) error); ok {
		r1 = rf(deploymentRunId, httpClient, tfeConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadDeploymentRunSteps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDeploymentRunSteps'
type MockTfeUtil_ReadDeploymentRunSteps_Call struct {
	*mock.Call
}

// ReadDeploymentRunSteps is a helper method to define mock.On call
//   - deploymentRunId string
//   - httpClient net.Client
//   - tfeConfig *tfe.Config
func (_e *MockTfeUtil_Expecter) ReadDeploymentRunSteps(deploymentRunId interface{}, httpClient interface{}, tfeConfig interface{}) *MockTfeUtil_ReadDeploymentRunSteps_Call {
	return &MockTfeUtil_ReadDeploymentRunSteps_Call{Call: _e.mock.On("ReadDeploymentRunSteps", deploymentRunId, httpClient, tfeConfig)}
}

func (_c *MockTfeUtil_ReadDeploymentRunSteps_Call) Run(run func(deploymentRunId string, httpClient net.Client, tfeConfig *tfe.Config)) *MockTfeUtil_ReadDeploymentRunSteps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(net.Client), args[2].(*tfe.Config))
	})
	return _c
}

func (_c *MockTfeUtil_ReadDeploymentRunSteps_Call) Return(_a0 []models.StackDeploymentStep, _a1 error) *MockTfeUtil_ReadDeploymentRunSteps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadDeploymentRunSteps_Call) RunAndReturn(run func(string, net.Client, *tfe.Config) ([]models.StackDeploymentStep, error)) *MockTfeUtil_ReadDeploymentRunSteps_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLatestDeploymentRun provides a mock function with given fields: stackId, deploymentName, httpClient, config, tfeClient
func (_m *MockTfeUtil) ReadLatestDeploymentRun(stackId string, deploymentName string, httpClient net.Client, config *tfe.Config, tfeClient *tfe.Client) (*tfe.StackDeploymentRun, error) {
	ret := _m.Called(stackId, deploymentName, httpClient, config, tfeClient)

	if len(ret) == 0 {
		panic("no return value specified for ReadLatestDeploymentRun")
	}

	var r0 *tfe.StackDeploymentRun
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, net.Client, *tfe.Config, *tfe.Client) (*tfe.StackDeploymentRun, error)); ok {
		return rf(stackId, deploymentName, httpClient, config, tfeClient)
	}
	if rf, ok := ret.Get(0).(func(string, string, net.Client, *tfe.Config, *tfe.Client) *tfe.StackDeploymentRun); ok {
		r0 = rf(stackId, deploymentName, httpClient, config, tfeClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.StackDeploymentRun)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, net.Client, *tfe.Config, *tfe.Client) error); ok {
		r1 = rf(stackId, deploymentName, httpClient, config, tfeClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadLatestDeploymentRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLatestDeploymentRun'
type MockTfeUtil_ReadLatestDeploymentRun_Call struct {
	*mock.Call
}

// ReadLatestDeploymentRun is a helper method to define mock.On call
//   - stackId string
//   - deploymentName string
//   - httpClient net.Client
//   - config *tfe.Config
//   - tfeClient *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadLatestDeploymentRun(stackId interface{}, deploymentName interface{}, httpClient interface{}, config interface{}, tfeClient interface{}) *MockTfeUtil_ReadLatestDeploymentRun_Call {
	return &MockTfeUtil_ReadLatestDeploymentRun_Call{Call: _e.mock.On("ReadLatestDeploymentRun", stackId, deploymentName, httpClient, config, tfeClient)}
}

func (_c *MockTfeUtil_ReadLatestDeploymentRun_Call) Run(run func(stackId string, deploymentName string, httpClient net.Client, config *tfe.Config, tfeClient *tfe.Client)) *MockTfeUtil_ReadLatestDeploymentRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(net.Client), args[3].(*tfe.Config), args[4].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadLatestDeploymentRun_Call) Return(_a0 *tfe.StackDeploymentRun, _a1 error) *MockTfeUtil_ReadLatestDeploymentRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadLatestDeploymentRun_Call) RunAndReturn(run func(string, string, net.Client, *tfe.Config, *tfe.Client) (*tfe.StackDeploymentRun, error)) *MockTfeUtil_ReadLatestDeploymentRun_Call {
	_c.Call.Return(run)
	return _c
}

// ReadOrgByName provides a mock function with given fields: organizationName, client
func (_m *MockTfeUtil) ReadOrgByName(organizationName string, client *tfe.Client) (*tfe.Organization, error) {
	ret := _m.Called(organizationName, client)

	if len(ret) == 0 {
		panic("no return value specified for ReadOrgByName")
	}

	var r0 *tfe.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) (*tfe.Organization, error)); ok {
		return rf(organizationName, client)
	}
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) *tfe.Organization); ok {
		r0 = rf(organizationName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *tfe.Client) error); ok {
		r1 = rf(organizationName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadOrgByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadOrgByName'
type MockTfeUtil_ReadOrgByName_Call struct {
	*mock.Call
}

// ReadOrgByName is a helper method to define mock.On call
//   - organizationName string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadOrgByName(organizationName interface{}, client interface{}) *MockTfeUtil_ReadOrgByName_Call {
	return &MockTfeUtil_ReadOrgByName_Call{Call: _e.mock.On("ReadOrgByName", organizationName, client)}
}

func (_c *MockTfeUtil_ReadOrgByName_Call) Run(run func(organizationName string, client *tfe.Client)) *MockTfeUtil_ReadOrgByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadOrgByName_Call) Return(_a0 *tfe.Organization, _a1 error) *MockTfeUtil_ReadOrgByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadOrgByName_Call) RunAndReturn(run func(string, *tfe.Client) (*tfe.Organization, error)) *MockTfeUtil_ReadOrgByName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadProjectByName provides a mock function with given fields: organizationName, projectName, client
func (_m *MockTfeUtil) ReadProjectByName(organizationName string, projectName string, client *tfe.Client) (*tfe.Project, error) {
	ret := _m.Called(organizationName, projectName, client)

	if len(ret) == 0 {
		panic("no return value specified for ReadProjectByName")
	}

	var r0 *tfe.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) (*tfe.Project, error)); ok {
		return rf(organizationName, projectName, client)
	}
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) *tfe.Project); ok {
		r0 = rf(organizationName, projectName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *tfe.Client) error); ok {
		r1 = rf(organizationName, projectName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadProjectByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadProjectByName'
type MockTfeUtil_ReadProjectByName_Call struct {
	*mock.Call
}

// ReadProjectByName is a helper method to define mock.On call
//   - organizationName string
//   - projectName string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadProjectByName(organizationName interface{}, projectName interface{}, client interface{}) *MockTfeUtil_ReadProjectByName_Call {
	return &MockTfeUtil_ReadProjectByName_Call{Call: _e.mock.On("ReadProjectByName", organizationName, projectName, client)}
}

func (_c *MockTfeUtil_ReadProjectByName_Call) Run(run func(organizationName string, projectName string, client *tfe.Client)) *MockTfeUtil_ReadProjectByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadProjectByName_Call) Return(_a0 *tfe.Project, _a1 error) *MockTfeUtil_ReadProjectByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadProjectByName_Call) RunAndReturn(run func(string, string, *tfe.Client) (*tfe.Project, error)) *MockTfeUtil_ReadProjectByName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadStackByName provides a mock function with given fields: organizationName, projectId, stackName, client
func (_m *MockTfeUtil) ReadStackByName(organizationName string, projectId string, stackName string, client *tfe.Client) (*tfe.Stack, error) {
	ret := _m.Called(organizationName, projectId, stackName, client)

	if len(ret) == 0 {
		panic("no return value specified for ReadStackByName")
	}

	var r0 *tfe.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *tfe.Client) (*tfe.Stack, error)); ok {
		return rf(organizationName, projectId, stackName, client)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *tfe.Client) *tfe.Stack); ok {
		r0 = rf(organizationName, projectId, stackName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *tfe.Client) error); ok {
		r1 = rf(organizationName, projectId, stackName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadStackByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStackByName'
type MockTfeUtil_ReadStackByName_Call struct {
	*mock.Call
}

// ReadStackByName is a helper method to define mock.On call
//   - organizationName string
//   - projectId string
//   - stackName string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadStackByName(organizationName interface{}, projectId interface{}, stackName interface{}, client interface{}) *MockTfeUtil_ReadStackByName_Call {
	return &MockTfeUtil_ReadStackByName_Call{Call: _e.mock.On("ReadStackByName", organizationName, projectId, stackName, client)}
}

func (_c *MockTfeUtil_ReadStackByName_Call) Run(run func(organizationName string, projectId string, stackName string, client *tfe.Client)) *MockTfeUtil_ReadStackByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadStackByName_Call) Return(_a0 *tfe.Stack, _a1 error) *MockTfeUtil_ReadStackByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadStackByName_Call) RunAndReturn(run func(string, string, string, *tfe.Client) (*tfe.Stack, error)) *MockTfeUtil_ReadStackByName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadStackDiagnosticsByConfigID provides a mock function with given fields: stackConfigId, httpClient, config
func (_m *MockTfeUtil) ReadStackDiagnosticsByConfigID(stackConfigId string, httpClient net.Client, config *tfe.Config) diag.Diagnostics {
	ret := _m.Called(stackConfigId, httpClient, config)

	if len(ret) == 0 {
		panic("no return value specified for ReadStackDiagnosticsByConfigID")
	}

	var r0 diag.Diagnostics
	if rf, ok := ret.Get(0).(func(string, net.Client, *tfe.Config) diag.Diagnostics); ok {
		r0 = rf(stackConfigId, httpClient, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(diag.Diagnostics)
		}
	}

	return r0
}

// MockTfeUtil_ReadStackDiagnosticsByConfigID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStackDiagnosticsByConfigID'
type MockTfeUtil_ReadStackDiagnosticsByConfigID_Call struct {
	*mock.Call
}

// ReadStackDiagnosticsByConfigID is a helper method to define mock.On call
//   - stackConfigId string
//   - httpClient net.Client
//   - config *tfe.Config
func (_e *MockTfeUtil_Expecter) ReadStackDiagnosticsByConfigID(stackConfigId interface{}, httpClient interface{}, config interface{}) *MockTfeUtil_ReadStackDiagnosticsByConfigID_Call {
	return &MockTfeUtil_ReadStackDiagnosticsByConfigID_Call{Call: _e.mock.On("ReadStackDiagnosticsByConfigID", stackConfigId, httpClient, config)}
}

func (_c *MockTfeUtil_ReadStackDiagnosticsByConfigID_Call) Run(run func(stackConfigId string, httpClient net.Client, config *tfe.Config)) *MockTfeUtil_ReadStackDiagnosticsByConfigID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(net.Client), args[2].(*tfe.Config))
	})
	return _c
}

func (_c *MockTfeUtil_ReadStackDiagnosticsByConfigID_Call) Return(_a0 diag.Diagnostics) *MockTfeUtil_ReadStackDiagnosticsByConfigID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTfeUtil_ReadStackDiagnosticsByConfigID_Call) RunAndReturn(run func(string, net.Client, *tfe.Config) diag.Diagnostics) *MockTfeUtil_ReadStackDiagnosticsByConfigID_Call {
	_c.Call.Return(run)
	return _c
}

// ReadStepById provides a mock function with given fields: stepId, client
func (_m *MockTfeUtil) ReadStepById(stepId string, client *tfe.Client) (*tfe.StackDeploymentStep, error) {
	ret := _m.Called(stepId, client)

	if len(ret) == 0 {
		panic("no return value specified for ReadStepById")
	}

	var r0 *tfe.StackDeploymentStep
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) (*tfe.StackDeploymentStep, error)); ok {
		return rf(stepId, client)
	}
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) *tfe.StackDeploymentStep); ok {
		r0 = rf(stepId, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.StackDeploymentStep)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *tfe.Client) error); ok {
		r1 = rf(stepId, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadStepById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStepById'
type MockTfeUtil_ReadStepById_Call struct {
	*mock.Call
}

// ReadStepById is a helper method to define mock.On call
//   - stepId string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadStepById(stepId interface{}, client interface{}) *MockTfeUtil_ReadStepById_Call {
	return &MockTfeUtil_ReadStepById_Call{Call: _e.mock.On("ReadStepById", stepId, client)}
}

func (_c *MockTfeUtil_ReadStepById_Call) Run(run func(stepId string, client *tfe.Client)) *MockTfeUtil_ReadStepById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadStepById_Call) Return(_a0 *tfe.StackDeploymentStep, _a1 error) *MockTfeUtil_ReadStepById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadStepById_Call) RunAndReturn(run func(string, *tfe.Client) (*tfe.StackDeploymentStep, error)) *MockTfeUtil_ReadStepById_Call {
	_c.Call.Return(run)
	return _c
}

// ReadTfeToken provides a mock function with given fields: tfeRemoteHostName
func (_m *MockTfeUtil) ReadTfeToken(tfeRemoteHostName string) (string, error) {
	ret := _m.Called(tfeRemoteHostName)

	if len(ret) == 0 {
		panic("no return value specified for ReadTfeToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tfeRemoteHostName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tfeRemoteHostName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tfeRemoteHostName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadTfeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadTfeToken'
type MockTfeUtil_ReadTfeToken_Call struct {
	*mock.Call
}

// ReadTfeToken is a helper method to define mock.On call
//   - tfeRemoteHostName string
func (_e *MockTfeUtil_Expecter) ReadTfeToken(tfeRemoteHostName interface{}) *MockTfeUtil_ReadTfeToken_Call {
	return &MockTfeUtil_ReadTfeToken_Call{Call: _e.mock.On("ReadTfeToken", tfeRemoteHostName)}
}

func (_c *MockTfeUtil_ReadTfeToken_Call) Run(run func(tfeRemoteHostName string)) *MockTfeUtil_ReadTfeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTfeUtil_ReadTfeToken_Call) Return(_a0 string, _a1 error) *MockTfeUtil_ReadTfeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadTfeToken_Call) RunAndReturn(run func(string) (string, error)) *MockTfeUtil_ReadTfeToken_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWorkspaceByName provides a mock function with given fields: organizationName, workspaceName, client
func (_m *MockTfeUtil) ReadWorkspaceByName(organizationName string, workspaceName string, client *tfe.Client) (*tfe.Workspace, error) {
	ret := _m.Called(organizationName, workspaceName, client)

	if len(ret) == 0 {
		panic("no return value specified for ReadWorkspaceByName")
	}

	var r0 *tfe.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) (*tfe.Workspace, error)); ok {
		return rf(organizationName, workspaceName, client)
	}
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) *tfe.Workspace); ok {
		r0 = rf(organizationName, workspaceName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *tfe.Client) error); ok {
		r1 = rf(organizationName, workspaceName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadWorkspaceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWorkspaceByName'
type MockTfeUtil_ReadWorkspaceByName_Call struct {
	*mock.Call
}

// ReadWorkspaceByName is a helper method to define mock.On call
//   - organizationName string
//   - workspaceName string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadWorkspaceByName(organizationName interface{}, workspaceName interface{}, client interface{}) *MockTfeUtil_ReadWorkspaceByName_Call {
	return &MockTfeUtil_ReadWorkspaceByName_Call{Call: _e.mock.On("ReadWorkspaceByName", organizationName, workspaceName, client)}
}

func (_c *MockTfeUtil_ReadWorkspaceByName_Call) Run(run func(organizationName string, workspaceName string, client *tfe.Client)) *MockTfeUtil_ReadWorkspaceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadWorkspaceByName_Call) Return(_a0 *tfe.Workspace, _a1 error) *MockTfeUtil_ReadWorkspaceByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadWorkspaceByName_Call) RunAndReturn(run func(string, string, *tfe.Client) (*tfe.Workspace, error)) *MockTfeUtil_ReadWorkspaceByName_Call {
	_c.Call.Return(run)
	return _c
}

// RerunDeploymentGroup provides a mock function with given fields: stackDeploymentGroupId, deploymentNames, client
func (_m *MockTfeUtil) RerunDeploymentGroup(stackDeploymentGroupId string, deploymentNames []string, client *tfe.Client) error {
	ret := _m.Called(stackDeploymentGroupId, deploymentNames, client)

	if len(ret) == 0 {
		panic("no return value specified for RerunDeploymentGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, *tfe.Client) error); ok {
		r0 = rf(stackDeploymentGroupId, deploymentNames, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTfeUtil_RerunDeploymentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RerunDeploymentGroup'
type MockTfeUtil_RerunDeploymentGroup_Call struct {
	*mock.Call
}

// RerunDeploymentGroup is a helper method to define mock.On call
//   - stackDeploymentGroupId string
//   - deploymentNames []string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) RerunDeploymentGroup(stackDeploymentGroupId interface{}, deploymentNames interface{}, client interface{}) *MockTfeUtil_RerunDeploymentGroup_Call {
	return &MockTfeUtil_RerunDeploymentGroup_Call{Call: _e.mock.On("RerunDeploymentGroup", stackDeploymentGroupId, deploymentNames, client)}
}

func (_c *MockTfeUtil_RerunDeploymentGroup_Call) Run(run func(stackDeploymentGroupId string, deploymentNames []string, client *tfe.Client)) *MockTfeUtil_RerunDeploymentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_RerunDeploymentGroup_Call) Return(_a0 error) *MockTfeUtil_RerunDeploymentGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTfeUtil_RerunDeploymentGroup_Call) RunAndReturn(run func(string, []string, *tfe.Client) error) *MockTfeUtil_RerunDeploymentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// StackConfigurationHasRunningDeploymentGroups provides a mock function with given fields: stackConfigurationId, client
func (_m *MockTfeUtil) StackConfigurationHasRunningDeploymentGroups(stackConfigurationId string, client *tfe.Client) (bool, error) {
	ret := _m.Called(stackConfigurationId, client)

	if len(ret) == 0 {
		panic("no return value specified for StackConfigurationHasRunningDeploymentGroups")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) (bool, error)); ok {
		return rf(stackConfigurationId, client)
	}
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) bool); ok {
		r0 = rf(stackConfigurationId, client)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, *tfe.Client) error); ok {
		r1 = rf(stackConfigurationId, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StackConfigurationHasRunningDeploymentGroups'
type MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call struct {
	*mock.Call
}

// StackConfigurationHasRunningDeploymentGroups is a helper method to define mock.On call
//   - stackConfigurationId string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) StackConfigurationHasRunningDeploymentGroups(stackConfigurationId interface{}, client interface{}) *MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call {
	return &MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call{Call: _e.mock.On("StackConfigurationHasRunningDeploymentGroups", stackConfigurationId, client)}
}

func (_c *MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call) Run(run func(stackConfigurationId string, client *tfe.Client)) *MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call) Return(_a0 bool, _a1 error) *MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call) RunAndReturn(run func(string, *tfe.Client) (bool, error)) *MockTfeUtil_StackConfigurationHasRunningDeploymentGroups_Call {
	_c.Call.Return(run)
	return _c
}

// StackConfigurationHasRunningPlan provides a mock function with given fields: stackConfigurationId, client
func (_m *MockTfeUtil) StackConfigurationHasRunningPlan(stackConfigurationId string, client *tfe.Client) (bool, error) {
	ret := _m.Called(stackConfigurationId, client)

	if len(ret) == 0 {
		panic("no return value specified for StackConfigurationHasRunningPlan")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) (bool, error)); ok {
		return rf(stackConfigurationId, client)
	}
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) bool); ok {
		r0 = rf(stackConfigurationId, client)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, *tfe.Client) error); ok {
		r1 = rf(stackConfigurationId, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_StackConfigurationHasRunningPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StackConfigurationHasRunningPlan'
type MockTfeUtil_StackConfigurationHasRunningPlan_Call struct {
	*mock.Call
}

// StackConfigurationHasRunningPlan is a helper method to define mock.On call
//   - stackConfigurationId string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) StackConfigurationHasRunningPlan(stackConfigurationId interface{}, client interface{}) *MockTfeUtil_StackConfigurationHasRunningPlan_Call {
	return &MockTfeUtil_StackConfigurationHasRunningPlan_Call{Call: _e.mock.On("StackConfigurationHasRunningPlan", stackConfigurationId, client)}
}

func (_c *MockTfeUtil_StackConfigurationHasRunningPlan_Call) Run(run func(stackConfigurationId string, client *tfe.Client)) *MockTfeUtil_StackConfigurationHasRunningPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_StackConfigurationHasRunningPlan_Call) Return(_a0 bool, _a1 error) *MockTfeUtil_StackConfigurationHasRunningPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_StackConfigurationHasRunningPlan_Call) RunAndReturn(run func(string, *tfe.Client) (bool, error)) *MockTfeUtil_StackConfigurationHasRunningPlan_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContext provides a mock function with given fields: ctx
func (_m *MockTfeUtil) UpdateContext(ctx context.Context) {
	_m.Called(ctx)
}

// MockTfeUtil_UpdateContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContext'
type MockTfeUtil_UpdateContext_Call struct {
	*mock.Call
}

// UpdateContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTfeUtil_Expecter) UpdateContext(ctx interface{}) *MockTfeUtil_UpdateContext_Call {
	return &MockTfeUtil_UpdateContext_Call{Call: _e.mock.On("UpdateContext", ctx)}
}

func (_c *MockTfeUtil_UpdateContext_Call) Run(run func(ctx context.Context)) *MockTfeUtil_UpdateContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTfeUtil_UpdateContext_Call) Return() *MockTfeUtil_UpdateContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTfeUtil_UpdateContext_Call) RunAndReturn(run func(context.Context)) *MockTfeUtil_UpdateContext_Call {
	_c.Run(run)
	return _c
}

// UploadStackConfigFile provides a mock function with given fields: stackId, configFileDirAbsPath, client
func (_m *MockTfeUtil) UploadStackConfigFile(stackId string, configFileDirAbsPath string, client *tfe.Client) (string, error) {
	ret := _m.Called(stackId, configFileDirAbsPath, client)

	if len(ret) == 0 {
		panic("no return value specified for UploadStackConfigFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) (string, error)); ok {
		return rf(stackId, configFileDirAbsPath, client)
	}
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) string); ok {
		r0 = rf(stackId, configFileDirAbsPath, client)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, *tfe.Client) error); ok {
		r1 = rf(stackId, configFileDirAbsPath, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_UploadStackConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadStackConfigFile'
type MockTfeUtil_UploadStackConfigFile_Call struct {
	*mock.Call
}

// UploadStackConfigFile is a helper method to define mock.On call
//   - stackId string
//   - configFileDirAbsPath string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) UploadStackConfigFile(stackId interface{}, configFileDirAbsPath interface{}, client interface{}) *MockTfeUtil_UploadStackConfigFile_Call {
	return &MockTfeUtil_UploadStackConfigFile_Call{Call: _e.mock.On("UploadStackConfigFile", stackId, configFileDirAbsPath, client)}
}

func (_c *MockTfeUtil_UploadStackConfigFile_Call) Run(run func(stackId string, configFileDirAbsPath string, client *tfe.Client)) *MockTfeUtil_UploadStackConfigFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_UploadStackConfigFile_Call) Return(_a0 string, _a1 error) *MockTfeUtil_UploadStackConfigFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_UploadStackConfigFile_Call) RunAndReturn(run func(string, string, *tfe.Client) (string, error)) *MockTfeUtil_UploadStackConfigFile_Call {
	_c.Call.Return(run)
	return _c
}

// WatchStackConfigurationUntilTerminalStatus provides a mock function with given fields: stackConfigurationId, client
func (_m *MockTfeUtil) WatchStackConfigurationUntilTerminalStatus(stackConfigurationId string, client *tfe.Client) (tfe.StackConfigurationStatus, diag.Diagnostics) {
	ret := _m.Called(stackConfigurationId, client)

	if len(ret) == 0 {
		panic("no return value specified for WatchStackConfigurationUntilTerminalStatus")
	}

	var r0 tfe.StackConfigurationStatus
	var r1 diag.Diagnostics
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) (tfe.StackConfigurationStatus, diag.Diagnostics)); ok {
		return rf(stackConfigurationId, client)
	}
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) tfe.StackConfigurationStatus); ok {
		r0 = rf(stackConfigurationId, client)
	} else {
		r0 = ret.Get(0).(tfe.StackConfigurationStatus)
	}

	if rf, ok := ret.Get(1).(func(string, *tfe.Client) diag.Diagnostics); ok {
		r1 = rf(stackConfigurationId, client)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(diag.Diagnostics)
		}
	}

	return r0, r1
}

// MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchStackConfigurationUntilTerminalStatus'
type MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call struct {
	*mock.Call
}

// WatchStackConfigurationUntilTerminalStatus is a helper method to define mock.On call
//   - stackConfigurationId string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) WatchStackConfigurationUntilTerminalStatus(stackConfigurationId interface{}, client interface{}) *MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call {
	return &MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call{Call: _e.mock.On("WatchStackConfigurationUntilTerminalStatus", stackConfigurationId, client)}
}

func (_c *MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call) Run(run func(stackConfigurationId string, client *tfe.Client)) *MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call) Return(_a0 tfe.StackConfigurationStatus, _a1 diag.Diagnostics) *MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call) RunAndReturn(run func(string, *tfe.Client) (tfe.StackConfigurationStatus, diag.Diagnostics)) *MockTfeUtil_WatchStackConfigurationUntilTerminalStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTfeUtil creates a new instance of MockTfeUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTfeUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTfeUtil {
	mock := &MockTfeUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
