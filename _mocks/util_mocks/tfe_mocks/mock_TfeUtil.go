// Code generated by mockery v2.51.1. DO NOT EDIT.

package tfe_mocks

import (
	tfe "github.com/hashicorp/go-tfe"
	mock "github.com/stretchr/testify/mock"
)

// MockTfeUtil is an autogenerated mock type for the TfeUtil type
type MockTfeUtil struct {
	mock.Mock
}

type MockTfeUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTfeUtil) EXPECT() *MockTfeUtil_Expecter {
	return &MockTfeUtil_Expecter{mock: &_m.Mock}
}

// AwaitStackConfigurationCompletion provides a mock function with given fields: stackConfigurationId, client
func (_m *MockTfeUtil) AwaitStackConfigurationCompletion(stackConfigurationId string, client *tfe.Client) (tfe.StackConfigurationStatus, error) {
	ret := _m.Called(stackConfigurationId, client)

	if len(ret) == 0 {
		panic("no return value specified for AwaitStackConfigurationCompletion")
	}

	var r0 tfe.StackConfigurationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) (tfe.StackConfigurationStatus, error)); ok {
		return rf(stackConfigurationId, client)
	}
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) tfe.StackConfigurationStatus); ok {
		r0 = rf(stackConfigurationId, client)
	} else {
		r0 = ret.Get(0).(tfe.StackConfigurationStatus)
	}

	if rf, ok := ret.Get(1).(func(string, *tfe.Client) error); ok {
		r1 = rf(stackConfigurationId, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_AwaitStackConfigurationCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AwaitStackConfigurationCompletion'
type MockTfeUtil_AwaitStackConfigurationCompletion_Call struct {
	*mock.Call
}

// AwaitStackConfigurationCompletion is a helper method to define mock.On call
//   - stackConfigurationId string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) AwaitStackConfigurationCompletion(stackConfigurationId interface{}, client interface{}) *MockTfeUtil_AwaitStackConfigurationCompletion_Call {
	return &MockTfeUtil_AwaitStackConfigurationCompletion_Call{Call: _e.mock.On("AwaitStackConfigurationCompletion", stackConfigurationId, client)}
}

func (_c *MockTfeUtil_AwaitStackConfigurationCompletion_Call) Run(run func(stackConfigurationId string, client *tfe.Client)) *MockTfeUtil_AwaitStackConfigurationCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_AwaitStackConfigurationCompletion_Call) Return(_a0 tfe.StackConfigurationStatus, _a1 error) *MockTfeUtil_AwaitStackConfigurationCompletion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_AwaitStackConfigurationCompletion_Call) RunAndReturn(run func(string, *tfe.Client) (tfe.StackConfigurationStatus, error)) *MockTfeUtil_AwaitStackConfigurationCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateStackSourceBundleHash provides a mock function with given fields: stackConfigFileAbsPath
func (_m *MockTfeUtil) CalculateStackSourceBundleHash(stackConfigFileAbsPath string) (string, error) {
	ret := _m.Called(stackConfigFileAbsPath)

	if len(ret) == 0 {
		panic("no return value specified for CalculateStackSourceBundleHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(stackConfigFileAbsPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(stackConfigFileAbsPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stackConfigFileAbsPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_CalculateStackSourceBundleHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateStackSourceBundleHash'
type MockTfeUtil_CalculateStackSourceBundleHash_Call struct {
	*mock.Call
}

// CalculateStackSourceBundleHash is a helper method to define mock.On call
//   - stackConfigFileAbsPath string
func (_e *MockTfeUtil_Expecter) CalculateStackSourceBundleHash(stackConfigFileAbsPath interface{}) *MockTfeUtil_CalculateStackSourceBundleHash_Call {
	return &MockTfeUtil_CalculateStackSourceBundleHash_Call{Call: _e.mock.On("CalculateStackSourceBundleHash", stackConfigFileAbsPath)}
}

func (_c *MockTfeUtil_CalculateStackSourceBundleHash_Call) Run(run func(stackConfigFileAbsPath string)) *MockTfeUtil_CalculateStackSourceBundleHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTfeUtil_CalculateStackSourceBundleHash_Call) Return(_a0 string, _a1 error) *MockTfeUtil_CalculateStackSourceBundleHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_CalculateStackSourceBundleHash_Call) RunAndReturn(run func(string) (string, error)) *MockTfeUtil_CalculateStackSourceBundleHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient provides a mock function with given fields: config
func (_m *MockTfeUtil) NewClient(config *tfe.Config) (*tfe.Client, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewClient")
	}

	var r0 *tfe.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*tfe.Config) (*tfe.Client, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*tfe.Config) *tfe.Client); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*tfe.Config) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_NewClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClient'
type MockTfeUtil_NewClient_Call struct {
	*mock.Call
}

// NewClient is a helper method to define mock.On call
//   - config *tfe.Config
func (_e *MockTfeUtil_Expecter) NewClient(config interface{}) *MockTfeUtil_NewClient_Call {
	return &MockTfeUtil_NewClient_Call{Call: _e.mock.On("NewClient", config)}
}

func (_c *MockTfeUtil_NewClient_Call) Run(run func(config *tfe.Config)) *MockTfeUtil_NewClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tfe.Config))
	})
	return _c
}

func (_c *MockTfeUtil_NewClient_Call) Return(_a0 *tfe.Client, _a1 error) *MockTfeUtil_NewClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_NewClient_Call) RunAndReturn(run func(*tfe.Config) (*tfe.Client, error)) *MockTfeUtil_NewClient_Call {
	_c.Call.Return(run)
	return _c
}

// ReadProjectByName provides a mock function with given fields: organizationName, projectName, client
func (_m *MockTfeUtil) ReadProjectByName(organizationName string, projectName string, client *tfe.Client) (*tfe.Project, error) {
	ret := _m.Called(organizationName, projectName, client)

	if len(ret) == 0 {
		panic("no return value specified for ReadProjectByName")
	}

	var r0 *tfe.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) (*tfe.Project, error)); ok {
		return rf(organizationName, projectName, client)
	}
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) *tfe.Project); ok {
		r0 = rf(organizationName, projectName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *tfe.Client) error); ok {
		r1 = rf(organizationName, projectName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadProjectByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadProjectByName'
type MockTfeUtil_ReadProjectByName_Call struct {
	*mock.Call
}

// ReadProjectByName is a helper method to define mock.On call
//   - organizationName string
//   - projectName string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadProjectByName(organizationName interface{}, projectName interface{}, client interface{}) *MockTfeUtil_ReadProjectByName_Call {
	return &MockTfeUtil_ReadProjectByName_Call{Call: _e.mock.On("ReadProjectByName", organizationName, projectName, client)}
}

func (_c *MockTfeUtil_ReadProjectByName_Call) Run(run func(organizationName string, projectName string, client *tfe.Client)) *MockTfeUtil_ReadProjectByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadProjectByName_Call) Return(_a0 *tfe.Project, _a1 error) *MockTfeUtil_ReadProjectByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadProjectByName_Call) RunAndReturn(run func(string, string, *tfe.Client) (*tfe.Project, error)) *MockTfeUtil_ReadProjectByName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadStackByName provides a mock function with given fields: organizationName, projectId, stackName, client
func (_m *MockTfeUtil) ReadStackByName(organizationName string, projectId string, stackName string, client *tfe.Client) (*tfe.Stack, error) {
	ret := _m.Called(organizationName, projectId, stackName, client)

	if len(ret) == 0 {
		panic("no return value specified for ReadStackByName")
	}

	var r0 *tfe.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *tfe.Client) (*tfe.Stack, error)); ok {
		return rf(organizationName, projectId, stackName, client)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *tfe.Client) *tfe.Stack); ok {
		r0 = rf(organizationName, projectId, stackName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *tfe.Client) error); ok {
		r1 = rf(organizationName, projectId, stackName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadStackByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStackByName'
type MockTfeUtil_ReadStackByName_Call struct {
	*mock.Call
}

// ReadStackByName is a helper method to define mock.On call
//   - organizationName string
//   - projectId string
//   - stackName string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) ReadStackByName(organizationName interface{}, projectId interface{}, stackName interface{}, client interface{}) *MockTfeUtil_ReadStackByName_Call {
	return &MockTfeUtil_ReadStackByName_Call{Call: _e.mock.On("ReadStackByName", organizationName, projectId, stackName, client)}
}

func (_c *MockTfeUtil_ReadStackByName_Call) Run(run func(organizationName string, projectId string, stackName string, client *tfe.Client)) *MockTfeUtil_ReadStackByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_ReadStackByName_Call) Return(_a0 *tfe.Stack, _a1 error) *MockTfeUtil_ReadStackByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadStackByName_Call) RunAndReturn(run func(string, string, string, *tfe.Client) (*tfe.Stack, error)) *MockTfeUtil_ReadStackByName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadTfeToken provides a mock function with given fields: tfeRemoteHostName
func (_m *MockTfeUtil) ReadTfeToken(tfeRemoteHostName string) (string, error) {
	ret := _m.Called(tfeRemoteHostName)

	if len(ret) == 0 {
		panic("no return value specified for ReadTfeToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tfeRemoteHostName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tfeRemoteHostName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tfeRemoteHostName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_ReadTfeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadTfeToken'
type MockTfeUtil_ReadTfeToken_Call struct {
	*mock.Call
}

// ReadTfeToken is a helper method to define mock.On call
//   - tfeRemoteHostName string
func (_e *MockTfeUtil_Expecter) ReadTfeToken(tfeRemoteHostName interface{}) *MockTfeUtil_ReadTfeToken_Call {
	return &MockTfeUtil_ReadTfeToken_Call{Call: _e.mock.On("ReadTfeToken", tfeRemoteHostName)}
}

func (_c *MockTfeUtil_ReadTfeToken_Call) Run(run func(tfeRemoteHostName string)) *MockTfeUtil_ReadTfeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTfeUtil_ReadTfeToken_Call) Return(_a0 string, _a1 error) *MockTfeUtil_ReadTfeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_ReadTfeToken_Call) RunAndReturn(run func(string) (string, error)) *MockTfeUtil_ReadTfeToken_Call {
	_c.Call.Return(run)
	return _c
}

// RedTfeOrgByName provides a mock function with given fields: organizationName, client
func (_m *MockTfeUtil) RedTfeOrgByName(organizationName string, client *tfe.Client) (*tfe.Organization, error) {
	ret := _m.Called(organizationName, client)

	if len(ret) == 0 {
		panic("no return value specified for RedTfeOrgByName")
	}

	var r0 *tfe.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) (*tfe.Organization, error)); ok {
		return rf(organizationName, client)
	}
	if rf, ok := ret.Get(0).(func(string, *tfe.Client) *tfe.Organization); ok {
		r0 = rf(organizationName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *tfe.Client) error); ok {
		r1 = rf(organizationName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_RedTfeOrgByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedTfeOrgByName'
type MockTfeUtil_RedTfeOrgByName_Call struct {
	*mock.Call
}

// RedTfeOrgByName is a helper method to define mock.On call
//   - organizationName string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) RedTfeOrgByName(organizationName interface{}, client interface{}) *MockTfeUtil_RedTfeOrgByName_Call {
	return &MockTfeUtil_RedTfeOrgByName_Call{Call: _e.mock.On("RedTfeOrgByName", organizationName, client)}
}

func (_c *MockTfeUtil_RedTfeOrgByName_Call) Run(run func(organizationName string, client *tfe.Client)) *MockTfeUtil_RedTfeOrgByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_RedTfeOrgByName_Call) Return(_a0 *tfe.Organization, _a1 error) *MockTfeUtil_RedTfeOrgByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_RedTfeOrgByName_Call) RunAndReturn(run func(string, *tfe.Client) (*tfe.Organization, error)) *MockTfeUtil_RedTfeOrgByName_Call {
	_c.Call.Return(run)
	return _c
}

// UploadStackConfigFile provides a mock function with given fields: stackId, configFileDirAbsPath, client
func (_m *MockTfeUtil) UploadStackConfigFile(stackId string, configFileDirAbsPath string, client *tfe.Client) (string, error) {
	ret := _m.Called(stackId, configFileDirAbsPath, client)

	if len(ret) == 0 {
		panic("no return value specified for UploadStackConfigFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) (string, error)); ok {
		return rf(stackId, configFileDirAbsPath, client)
	}
	if rf, ok := ret.Get(0).(func(string, string, *tfe.Client) string); ok {
		r0 = rf(stackId, configFileDirAbsPath, client)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, *tfe.Client) error); ok {
		r1 = rf(stackId, configFileDirAbsPath, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTfeUtil_UploadStackConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadStackConfigFile'
type MockTfeUtil_UploadStackConfigFile_Call struct {
	*mock.Call
}

// UploadStackConfigFile is a helper method to define mock.On call
//   - stackId string
//   - configFileDirAbsPath string
//   - client *tfe.Client
func (_e *MockTfeUtil_Expecter) UploadStackConfigFile(stackId interface{}, configFileDirAbsPath interface{}, client interface{}) *MockTfeUtil_UploadStackConfigFile_Call {
	return &MockTfeUtil_UploadStackConfigFile_Call{Call: _e.mock.On("UploadStackConfigFile", stackId, configFileDirAbsPath, client)}
}

func (_c *MockTfeUtil_UploadStackConfigFile_Call) Run(run func(stackId string, configFileDirAbsPath string, client *tfe.Client)) *MockTfeUtil_UploadStackConfigFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*tfe.Client))
	})
	return _c
}

func (_c *MockTfeUtil_UploadStackConfigFile_Call) Return(_a0 string, _a1 error) *MockTfeUtil_UploadStackConfigFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTfeUtil_UploadStackConfigFile_Call) RunAndReturn(run func(string, string, *tfe.Client) (string, error)) *MockTfeUtil_UploadStackConfigFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTfeUtil creates a new instance of MockTfeUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTfeUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTfeUtil {
	mock := &MockTfeUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
