// Code generated by mockery v2.49.0. DO NOT EDIT.

package token_validator_mocks

import mock "github.com/stretchr/testify/mock"

// MockGitlabTokenValidator is an autogenerated mock type for the GitlabTokenValidator type
type MockGitlabTokenValidator struct {
	mock.Mock
}

type MockGitlabTokenValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitlabTokenValidator) EXPECT() *MockGitlabTokenValidator_Expecter {
	return &MockGitlabTokenValidator_Expecter{mock: &_m.Mock}
}

// ValidateToken provides a mock function with given fields: repoUrl, repoIdentifier
func (_m *MockGitlabTokenValidator) ValidateToken(repoUrl string, repoIdentifier string) (string, error) {
	ret := _m.Called(repoUrl, repoIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(repoUrl, repoIdentifier)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(repoUrl, repoIdentifier)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repoUrl, repoIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitlabTokenValidator_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockGitlabTokenValidator_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - repoUrl string
//   - repoIdentifier string
func (_e *MockGitlabTokenValidator_Expecter) ValidateToken(repoUrl interface{}, repoIdentifier interface{}) *MockGitlabTokenValidator_ValidateToken_Call {
	return &MockGitlabTokenValidator_ValidateToken_Call{Call: _e.mock.On("ValidateToken", repoUrl, repoIdentifier)}
}

func (_c *MockGitlabTokenValidator_ValidateToken_Call) Run(run func(repoUrl string, repoIdentifier string)) *MockGitlabTokenValidator_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitlabTokenValidator_ValidateToken_Call) Return(_a0 string, _a1 error) *MockGitlabTokenValidator_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitlabTokenValidator_ValidateToken_Call) RunAndReturn(run func(string, string) (string, error)) *MockGitlabTokenValidator_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitlabTokenValidator creates a new instance of MockGitlabTokenValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitlabTokenValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitlabTokenValidator {
	mock := &MockGitlabTokenValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
