// Code generated by mockery v2.49.0. DO NOT EDIT.

package token_validator_mocks

import (
	constants "terraform-provider-tfmigrate/internal/constants"

	mock "github.com/stretchr/testify/mock"

	token_validator "terraform-provider-tfmigrate/internal/util/token_validator"
)

// MockTokenValidatorFactory is an autogenerated mock type for the TokenValidatorFactory type
type MockTokenValidatorFactory struct {
	mock.Mock
}

type MockTokenValidatorFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenValidatorFactory) EXPECT() *MockTokenValidatorFactory_Expecter {
	return &MockTokenValidatorFactory_Expecter{mock: &_m.Mock}
}

// NewTokenValidator provides a mock function with given fields: gitServiceProvider
func (_m *MockTokenValidatorFactory) NewTokenValidator(gitServiceProvider *constants.GitServiceProvider) (token_validator.TokenValidator, error) {
	ret := _m.Called(gitServiceProvider)

	if len(ret) == 0 {
		panic("no return value specified for NewTokenValidator")
	}

	var r0 token_validator.TokenValidator
	var r1 error
	if rf, ok := ret.Get(0).(func(*constants.GitServiceProvider) (token_validator.TokenValidator, error)); ok {
		return rf(gitServiceProvider)
	}
	if rf, ok := ret.Get(0).(func(*constants.GitServiceProvider) token_validator.TokenValidator); ok {
		r0 = rf(gitServiceProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(token_validator.TokenValidator)
		}
	}

	if rf, ok := ret.Get(1).(func(*constants.GitServiceProvider) error); ok {
		r1 = rf(gitServiceProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenValidatorFactory_NewTokenValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTokenValidator'
type MockTokenValidatorFactory_NewTokenValidator_Call struct {
	*mock.Call
}

// NewTokenValidator is a helper method to define mock.On call
//   - gitServiceProvider *constants.GitServiceProvider
func (_e *MockTokenValidatorFactory_Expecter) NewTokenValidator(gitServiceProvider interface{}) *MockTokenValidatorFactory_NewTokenValidator_Call {
	return &MockTokenValidatorFactory_NewTokenValidator_Call{Call: _e.mock.On("NewTokenValidator", gitServiceProvider)}
}

func (_c *MockTokenValidatorFactory_NewTokenValidator_Call) Run(run func(gitServiceProvider *constants.GitServiceProvider)) *MockTokenValidatorFactory_NewTokenValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*constants.GitServiceProvider))
	})
	return _c
}

func (_c *MockTokenValidatorFactory_NewTokenValidator_Call) Return(_a0 token_validator.TokenValidator, _a1 error) *MockTokenValidatorFactory_NewTokenValidator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenValidatorFactory_NewTokenValidator_Call) RunAndReturn(run func(*constants.GitServiceProvider) (token_validator.TokenValidator, error)) *MockTokenValidatorFactory_NewTokenValidator_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenValidatorFactory creates a new instance of MockTokenValidatorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenValidatorFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenValidatorFactory {
	mock := &MockTokenValidatorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
