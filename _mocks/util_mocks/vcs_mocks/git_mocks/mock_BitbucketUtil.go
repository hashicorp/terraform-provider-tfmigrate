// Code generated by mockery v2.51.1. DO NOT EDIT.

package git_mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockBitbucketUtil is an autogenerated mock type for the BitbucketUtil type
type MockBitbucketUtil struct {
	mock.Mock
}

type MockBitbucketUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBitbucketUtil) EXPECT() *MockBitbucketUtil_Expecter {
	return &MockBitbucketUtil_Expecter{mock: &_m.Mock}
}

// CheckTokenTypeAndScopes provides a mock function with given fields: workspace, repoSlug, accessToken
func (_m *MockBitbucketUtil) CheckTokenTypeAndScopes(workspace string, repoSlug string, accessToken string) (string, string, *http.Response, error) {
	ret := _m.Called(workspace, repoSlug, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckTokenTypeAndScopes")
	}

	var r0 string
	var r1 string
	var r2 *http.Response
	var r3 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, string, *http.Response, error)); ok {
		return rf(workspace, repoSlug, accessToken)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(workspace, repoSlug, accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(workspace, repoSlug, accessToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) *http.Response); ok {
		r2 = rf(workspace, repoSlug, accessToken)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*http.Response)
		}
	}

	if rf, ok := ret.Get(3).(func(string, string, string) error); ok {
		r3 = rf(workspace, repoSlug, accessToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockBitbucketUtil_CheckTokenTypeAndScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTokenTypeAndScopes'
type MockBitbucketUtil_CheckTokenTypeAndScopes_Call struct {
	*mock.Call
}

// CheckTokenTypeAndScopes is a helper method to define mock.On call
//   - workspace string
//   - repoSlug string
//   - accessToken string
func (_e *MockBitbucketUtil_Expecter) CheckTokenTypeAndScopes(workspace interface{}, repoSlug interface{}, accessToken interface{}) *MockBitbucketUtil_CheckTokenTypeAndScopes_Call {
	return &MockBitbucketUtil_CheckTokenTypeAndScopes_Call{Call: _e.mock.On("CheckTokenTypeAndScopes", workspace, repoSlug, accessToken)}
}

func (_c *MockBitbucketUtil_CheckTokenTypeAndScopes_Call) Run(run func(workspace string, repoSlug string, accessToken string)) *MockBitbucketUtil_CheckTokenTypeAndScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBitbucketUtil_CheckTokenTypeAndScopes_Call) Return(_a0 string, _a1 string, _a2 *http.Response, _a3 error) *MockBitbucketUtil_CheckTokenTypeAndScopes_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockBitbucketUtil_CheckTokenTypeAndScopes_Call) RunAndReturn(run func(string, string, string) (string, string, *http.Response, error)) *MockBitbucketUtil_CheckTokenTypeAndScopes_Call {
	_c.Call.Return(run)
	return _c
}

// ContainsScope provides a mock function with given fields: scopes, required
func (_m *MockBitbucketUtil) ContainsScope(scopes string, required string) bool {
	ret := _m.Called(scopes, required)

	if len(ret) == 0 {
		panic("no return value specified for ContainsScope")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(scopes, required)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBitbucketUtil_ContainsScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainsScope'
type MockBitbucketUtil_ContainsScope_Call struct {
	*mock.Call
}

// ContainsScope is a helper method to define mock.On call
//   - scopes string
//   - required string
func (_e *MockBitbucketUtil_Expecter) ContainsScope(scopes interface{}, required interface{}) *MockBitbucketUtil_ContainsScope_Call {
	return &MockBitbucketUtil_ContainsScope_Call{Call: _e.mock.On("ContainsScope", scopes, required)}
}

func (_c *MockBitbucketUtil_ContainsScope_Call) Run(run func(scopes string, required string)) *MockBitbucketUtil_ContainsScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockBitbucketUtil_ContainsScope_Call) Return(_a0 bool) *MockBitbucketUtil_ContainsScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBitbucketUtil_ContainsScope_Call) RunAndReturn(run func(string, string) bool) *MockBitbucketUtil_ContainsScope_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBitbucketUtil creates a new instance of MockBitbucketUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBitbucketUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBitbucketUtil {
	mock := &MockBitbucketUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
