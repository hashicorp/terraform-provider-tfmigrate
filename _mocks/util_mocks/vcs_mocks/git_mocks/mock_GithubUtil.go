// Code generated by mockery v2.49.0. DO NOT EDIT.

package git_mocks

import (
	github "github.com/google/go-github/v66/github"
	mock "github.com/stretchr/testify/mock"
)

// MockGithubUtil is an autogenerated mock type for the GithubUtil type
type MockGithubUtil struct {
	mock.Mock
}

type MockGithubUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGithubUtil) EXPECT() *MockGithubUtil_Expecter {
	return &MockGithubUtil_Expecter{mock: &_m.Mock}
}

// GetRepository provides a mock function with given fields: owner, repo
func (_m *MockGithubUtil) GetRepository(owner string, repo string) (*github.Repository, *github.Response, error) {
	ret := _m.Called(owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *github.Repository
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*github.Repository, *github.Response, error)); ok {
		return rf(owner, repo)
	}
	if rf, ok := ret.Get(0).(func(string, string) *github.Repository); ok {
		r0 = rf(owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *github.Response); ok {
		r1 = rf(owner, repo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGithubUtil_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type MockGithubUtil_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - owner string
//   - repo string
func (_e *MockGithubUtil_Expecter) GetRepository(owner interface{}, repo interface{}) *MockGithubUtil_GetRepository_Call {
	return &MockGithubUtil_GetRepository_Call{Call: _e.mock.On("GetRepository", owner, repo)}
}

func (_c *MockGithubUtil_GetRepository_Call) Run(run func(owner string, repo string)) *MockGithubUtil_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGithubUtil_GetRepository_Call) Return(_a0 *github.Repository, _a1 *github.Response, _a2 error) *MockGithubUtil_GetRepository_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGithubUtil_GetRepository_Call) RunAndReturn(run func(string, string) (*github.Repository, *github.Response, error)) *MockGithubUtil_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGithubUtil creates a new instance of MockGithubUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGithubUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGithubUtil {
	mock := &MockGithubUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
