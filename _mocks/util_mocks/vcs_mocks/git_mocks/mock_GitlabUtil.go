// Code generated by mockery v2.51.1. DO NOT EDIT.

package git_mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// MockGitlabUtil is an autogenerated mock type for the GitlabUtil type
type MockGitlabUtil struct {
	mock.Mock
}

type MockGitlabUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitlabUtil) EXPECT() *MockGitlabUtil_Expecter {
	return &MockGitlabUtil_Expecter{mock: &_m.Mock}
}

// GetProject provides a mock function with given fields: projectIdentifier
func (_m *MockGitlabUtil) GetProject(projectIdentifier string) (*gitlab.Project, *gitlab.Response, error) {
	ret := _m.Called(projectIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*gitlab.Project, *gitlab.Response, error)); ok {
		return rf(projectIdentifier)
	}
	if rf, ok := ret.Get(0).(func(string) *gitlab.Project); ok {
		r0 = rf(projectIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *gitlab.Response); ok {
		r1 = rf(projectIdentifier)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(projectIdentifier)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGitlabUtil_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockGitlabUtil_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - projectIdentifier string
func (_e *MockGitlabUtil_Expecter) GetProject(projectIdentifier interface{}) *MockGitlabUtil_GetProject_Call {
	return &MockGitlabUtil_GetProject_Call{Call: _e.mock.On("GetProject", projectIdentifier)}
}

func (_c *MockGitlabUtil_GetProject_Call) Run(run func(projectIdentifier string)) *MockGitlabUtil_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGitlabUtil_GetProject_Call) Return(_a0 *gitlab.Project, _a1 *gitlab.Response, _a2 error) *MockGitlabUtil_GetProject_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGitlabUtil_GetProject_Call) RunAndReturn(run func(string) (*gitlab.Project, *gitlab.Response, error)) *MockGitlabUtil_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitlabUtil creates a new instance of MockGitlabUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitlabUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitlabUtil {
	mock := &MockGitlabUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
