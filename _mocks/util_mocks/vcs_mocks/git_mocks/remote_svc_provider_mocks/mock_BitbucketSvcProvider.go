// Code generated by mockery v2.51.1. DO NOT EDIT.

package remote_svc_provider_mocks

import (
	git "terraform-provider-tfmigrate/internal/util/vcs/git"

	mock "github.com/stretchr/testify/mock"
)

// MockBitbucketSvcProvider is an autogenerated mock type for the BitbucketSvcProvider type
type MockBitbucketSvcProvider struct {
	mock.Mock
}

type MockBitbucketSvcProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBitbucketSvcProvider) EXPECT() *MockBitbucketSvcProvider_Expecter {
	return &MockBitbucketSvcProvider_Expecter{mock: &_m.Mock}
}

// CreatePullRequest provides a mock function with given fields: params
func (_m *MockBitbucketSvcProvider) CreatePullRequest(params git.PullRequestParams) (string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(git.PullRequestParams) (string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(git.PullRequestParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(git.PullRequestParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBitbucketSvcProvider_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type MockBitbucketSvcProvider_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - params git.PullRequestParams
func (_e *MockBitbucketSvcProvider_Expecter) CreatePullRequest(params interface{}) *MockBitbucketSvcProvider_CreatePullRequest_Call {
	return &MockBitbucketSvcProvider_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", params)}
}

func (_c *MockBitbucketSvcProvider_CreatePullRequest_Call) Run(run func(params git.PullRequestParams)) *MockBitbucketSvcProvider_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(git.PullRequestParams))
	})
	return _c
}

func (_c *MockBitbucketSvcProvider_CreatePullRequest_Call) Return(_a0 string, _a1 error) *MockBitbucketSvcProvider_CreatePullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBitbucketSvcProvider_CreatePullRequest_Call) RunAndReturn(run func(git.PullRequestParams) (string, error)) *MockBitbucketSvcProvider_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: repoUrl, repoIdentifier, tokenFromProvider
func (_m *MockBitbucketSvcProvider) ValidateToken(repoUrl string, repoIdentifier string, tokenFromProvider string) (string, error) {
	ret := _m.Called(repoUrl, repoIdentifier, tokenFromProvider)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(repoUrl, repoIdentifier, tokenFromProvider)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(repoUrl, repoIdentifier, tokenFromProvider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(repoUrl, repoIdentifier, tokenFromProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBitbucketSvcProvider_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockBitbucketSvcProvider_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - repoUrl string
//   - repoIdentifier string
//   - tokenFromProvider string
func (_e *MockBitbucketSvcProvider_Expecter) ValidateToken(repoUrl interface{}, repoIdentifier interface{}, tokenFromProvider interface{}) *MockBitbucketSvcProvider_ValidateToken_Call {
	return &MockBitbucketSvcProvider_ValidateToken_Call{Call: _e.mock.On("ValidateToken", repoUrl, repoIdentifier, tokenFromProvider)}
}

func (_c *MockBitbucketSvcProvider_ValidateToken_Call) Run(run func(repoUrl string, repoIdentifier string, tokenFromProvider string)) *MockBitbucketSvcProvider_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBitbucketSvcProvider_ValidateToken_Call) Return(_a0 string, _a1 error) *MockBitbucketSvcProvider_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBitbucketSvcProvider_ValidateToken_Call) RunAndReturn(run func(string, string, string) (string, error)) *MockBitbucketSvcProvider_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBitbucketSvcProvider creates a new instance of MockBitbucketSvcProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBitbucketSvcProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBitbucketSvcProvider {
	mock := &MockBitbucketSvcProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
