// Code generated by mockery v2.51.1. DO NOT EDIT.

package remote_svc_provider_mocks

import (
	constants "terraform-provider-tfmigrate/internal/constants"

	mock "github.com/stretchr/testify/mock"

	remote_svc_provider "terraform-provider-tfmigrate/internal/util/vcs/git/remote_svc_provider"
)

// MockRemoteVcsSvcProviderFactory is an autogenerated mock type for the RemoteVcsSvcProviderFactory type
type MockRemoteVcsSvcProviderFactory struct {
	mock.Mock
}

type MockRemoteVcsSvcProviderFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteVcsSvcProviderFactory) EXPECT() *MockRemoteVcsSvcProviderFactory_Expecter {
	return &MockRemoteVcsSvcProviderFactory_Expecter{mock: &_m.Mock}
}

// NewRemoteVcsSvcProvider provides a mock function with given fields: gitServiceProvider
func (_m *MockRemoteVcsSvcProviderFactory) NewRemoteVcsSvcProvider(gitServiceProvider *constants.GitServiceProvider) (remote_svc_provider.RemoteVcsSvcProvider, error) {
	ret := _m.Called(gitServiceProvider)

	if len(ret) == 0 {
		panic("no return value specified for NewRemoteVcsSvcProvider")
	}

	var r0 remote_svc_provider.RemoteVcsSvcProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(*constants.GitServiceProvider) (remote_svc_provider.RemoteVcsSvcProvider, error)); ok {
		return rf(gitServiceProvider)
	}
	if rf, ok := ret.Get(0).(func(*constants.GitServiceProvider) remote_svc_provider.RemoteVcsSvcProvider); ok {
		r0 = rf(gitServiceProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(remote_svc_provider.RemoteVcsSvcProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(*constants.GitServiceProvider) error); ok {
		r1 = rf(gitServiceProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRemoteVcsSvcProvider'
type MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call struct {
	*mock.Call
}

// NewRemoteVcsSvcProvider is a helper method to define mock.On call
//   - gitServiceProvider *constants.GitServiceProvider
func (_e *MockRemoteVcsSvcProviderFactory_Expecter) NewRemoteVcsSvcProvider(gitServiceProvider interface{}) *MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call {
	return &MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call{Call: _e.mock.On("NewRemoteVcsSvcProvider", gitServiceProvider)}
}

func (_c *MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call) Run(run func(gitServiceProvider *constants.GitServiceProvider)) *MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*constants.GitServiceProvider))
	})
	return _c
}

func (_c *MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call) Return(_a0 remote_svc_provider.RemoteVcsSvcProvider, _a1 error) *MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call) RunAndReturn(run func(*constants.GitServiceProvider) (remote_svc_provider.RemoteVcsSvcProvider, error)) *MockRemoteVcsSvcProviderFactory_NewRemoteVcsSvcProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteVcsSvcProviderFactory creates a new instance of MockRemoteVcsSvcProviderFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteVcsSvcProviderFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteVcsSvcProviderFactory {
	mock := &MockRemoteVcsSvcProviderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
